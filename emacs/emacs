(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

; general settings
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

; theme
(load-theme 'doom-tomorrow-night t)

; tabbar settings
(tabbar-mode)
(setq tabbar-use-images nil)
(setq tabbar-background-color "#333")

; poweline
(require 'powerline)
(powerline-center-theme)
(require 'airline-themes)
(load-theme 'airline-doom-molokai :no-confirm)
(setq airline-utf-glyph-separator-left      #xe0b0
      airline-utf-glyph-separator-right     #xe0b2
      airline-utf-glyph-subseparator-left   #xe0b1
      airline-utf-glyph-subseparator-right  #xe0b3
      airline-utf-glyph-branch              #xe0a0
      airline-utf-glyph-readonly            #xe0a2
      airline-utf-glyph-linenumber          #xe0a1)

; file manager
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
(setq neo-hidden-regexp-list '("venv" "\\.pyc$" "~$" "\\.git" "__pycache__"))
(setq neo-window-position (quote right))

; line settings
(global-display-line-numbers-mode 1)
(column-number-mode t)
(require 'fill-column-indicator)
(add-hook 'afte0r-change-major-mode-hook 'fci-mode)
(setq fci-rule-column 120)
(setq-default
  whitespace-line-column 120
  whitespace-style '(face lines-tail))
(add-hook 'prog-mode-hook #'whitespace-mode)
(toggle-truncate-lines -1)
(add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode -1)))

; tags settings
;; create tags
(defun create-tags (dir-name)
  "Create tags file."
  (interactive "DDirectory: ")
  (eshell-command
    (format "find . -type f -iname \"*.py\" -not -path \"*/venv/*\" | etags -" dir-name)))
;; refresh tags
(defun er-refresh-etags (&optional extension)
  "Run etags on all peer files in current dir and reload them silently."
  (interactive)
  (shell-command (format "find . -type f -iname \"*.py\" -not -path \"*/venv/*\" | etags -" '.))
  (let ((tags-revert-without-query t))  ; don't query, revert silently
    (visit-tags-table default-directory nil)))

; buffer settings
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq-default truncate-lines 1)

; default buffers
(setq inhibit-startup-screen t)
(setq-default message-log-max nil)
(kill-buffer "*Messages*")
(setq initial-scratch-message "")
(kill-buffer "*scratch*")
(add-hook 'minibuffer-exit-hook
  '(lambda ()
    (let ((buffer "*Completions*"))
      (and (get-buffer buffer)
      (kill-buffer buffer)))))

; dumb jump
(setq dumb-jump-prefer-searcher 'ag)
(setq dumb-jump-default-project ".")

; shortcut keys
;; create window
(global-set-key (kbd "M-<up>") 'windmove-up)
(global-set-key (kbd "M-<down>") 'windmove-down)
(global-set-key (kbd "M-<left>") 'windmove-left)
(global-set-key (kbd "M-<right>") 'windmove-right)
;; window size
(global-set-key (kbd "S-C-<up>") 'shrink-window)
(global-set-key (kbd "S-C-<down>") 'enlarge-window)
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
;; select text
(global-set-key (kbd "C-o") 'er/expand-region)
;; goto
(global-set-key (kbd "M-d") 'dumb-jump-go)
(global-set-key (kbd "M-f") 'dumb-jump-back)
(global-set-key (kbd "M-q") 'dumb-jump-quick-look)
;; find
(global-set-key (kbd "C-p") 'find-grep)
;; auto indent (mark-whole-buffer -> c-x h, indent-region -> c-m-\)
;; git settings
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x v") 'magit-diff-range)

; fold
;(load-library "hideshow")
;(global-set-key (kbd "M-f") 'hs-toggle-hiding)
;(add-hook 'python-mode-hook 'hs-minor-mode)

; project
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

; trim spaces
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)

;; autopair closing parenthesis insertion
(autopair-global-mode)
(diminish 'autopair-mode)
(show-paren-mode 1)

; auto completion
(ac-config-default)

; git
(global-set-key (kbd "C-x g") 'magit-status)
(global-git-gutter-mode +1)

; misc
(global-set-key (kbd "C-c g") 'rgrep)

; handle copy/paste
(defun copy-to-clipboard ()
  (interactive)
  (if (region-active-p)
	(progn
	  (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
	  (message "Yanked region to clipboard!")
	  (deactivate-mark))
      (message "No region active; can't yank to clipboard!"))
  )
(defun cut-to-clipboard ()
  (interactive)
  (if (region-active-p)
	(progn
	  (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
	  (call-interactively 'clipboard-kill-region)
	  (message "Cut region to clipboard!")
	  (deactivate-mark))
      (message "No region active; can't yank to clipboard!"))
  )
(defun paste-from-clipboard ()
  (interactive)
  (insert (shell-command-to-string "xsel -o -b"))
  )
(global-set-key (kbd "M-w") 'copy-to-clipboard)
(global-set-key (kbd "C-w") 'cut-to-clipboard)
(global-set-key (kbd "C-y") 'paste-from-clipboard)
(global-set-key (kbd "C-q") 'paste-from-clipboard)

; find & replace
(global-set-key (kbd "C-h") 'query-replace)

; hungry delete
(require 'hungry-delete)
(add-hook 'python-mode-hook #'(lambda () (hungry-keyboard python-mode-map)))
(global-set-key (kbd "C-h") 'hungry-delete-backward)
(global-set-key (kbd "C-<delete>") 'hungry-delete-forward)

; find file in project
(global-set-key (kbd "C-f") 'find-file-in-project)
(global-set-key (kbd "C-d") 'find-file-with-similar-name)
(global-set-key (kbd "C-l") 'find-file-in-current-directory)
(global-set-key (kbd "C-v") 'ffip-split-window-vertically)
(global-set-key (kbd "C-h") 'ffip-split-window-horizontally)

; drag lines (move up/down)
(require 'drag-stuff)
(drag-stuff-global-mode 1)
(global-set-key (kbd "M-S-<up>") 'drag-stuff-up)
(global-set-key (kbd "M-S-<down>") 'drag-stuff-down)

; tabbar config
(global-set-key (kbd "S-<left>") 'tabbar-backward-tab)
(global-set-key (kbd "S-<right>") 'tabbar-forward-tab)

; rest client mode
(global-set-key (kbd "M-r") 'restclient-mode)

; compile
(global-set-key (kbd "C-c s") 'eshell)
(global-set-key (kbd "C-c c") 'compile)

; help config
(require 'helm)
(helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-c") 'helm-find)
(global-set-key (kbd "C-f") 'helm-find-files)
(global-set-key (kbd "C-s") 'helm-occur)
(global-set-key (kbd "M-v") 'helm-grep-do-git-grep)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (git-gutter helm projectile auto-compile doom-themes evil airline-themes powerline go-mode tabbar makefile-executor farmhouse-theme dracula-theme markdown-mode regex-tool salt-mode json-mode restclient nlinum toml-mode drag-stuff find-file-in-project hungry-delete focus multiple-cursors docker-compose-mode dockerfile-mode rust-mode vala-mode auto-complete dumb-jump magit fill-column-indicator expand-region neotree))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
