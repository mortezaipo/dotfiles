(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

;; general settings
(menu-bar-mode -1)
;;(toggle-scroll-bar -1)
;;(tool-bar-mode -1)

;; c/c++
;;(setq c-basic-offset 4)
(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)

(global-unset-key (kbd "<next>"))
(global-unset-key (kbd "<prior>"))
(delete-selection-mode 1)

;; dashboard
(require 'dashboard)
(dashboard-setup-startup-hook)
(setq dashboard-items '((recents  . 5)
                        (projects . 5)
                        (agenda . 5)))

;; filter ido
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode t)
;;(setq ido-use-filename-at-point 'guess)
(setq ido-ignore-extensions t)
(setq ido-show-dot-for-dired nil)
(setq ido-ignore-files '("Makefile" "\\.cmake" "CMakeCache\.txt" "CMakeFiles/" ".git/" ".github" ".bin/" "Testing/" "tmp/" "\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./"))
;; theme
(load-theme 'monokai t) ;;idea-darkula  spacemacs-dark
(global-hl-line-mode 1)
(setq monokai-highlight-line "#262626"
      monokai-line-number    "#262626")
;;(set-default-font "Hack Nerd Font 13")
(set-face-bold 'bold nil)
;; calendar
;;(require 'appt)

;; dump jump
(setq dumb-jump-quiet t)
(setq dumb-jump-selector 'ivy)
(setq dumb-jump-prefer-searcher 'ag)
(setq dumb-jump-default-project ".")

;; tabbar settings
(tabbar-mode)
;;(setq tabbar-use-images nil)
;;(setq tabbar-background-color "#333")
;; Tabbar settings
;; tab theme: https://gist.github.com/3demax/1264635
(set-face-attribute
 'tabbar-default nil
 :background "gray20"
 :foreground "gray20"
 :box '(:line-width 1 :color "gray20" :style nil))
(set-face-attribute
 'tabbar-unselected nil
 :background "gray30"
 :foreground "white"
 :box '(:line-width 5 :color "gray30" :style nil))
(set-face-attribute
 'tabbar-selected nil
 :background "gray75"
 :foreground "black"
 :box '(:line-width 5 :color "gray75" :style nil))
(set-face-attribute
 'tabbar-highlight nil
 :background "white"
 :foreground "black"
 :underline nil
 :box '(:line-width 5 :color "white" :style nil))
;; (set-face-attribute
;;  'tabbar-button nil
;;  :box '(:line-width 1 :color "gray20" :style nil))
(set-face-attribute
 'tabbar-separator nil
 :background "gray20"
 :height 0.6)
;; hide tabbar navigation buttons
;; source: https://github.com/dholm/tabbar/issues/27#issuecomment-467308462
(customize-set-variable 'tabbar-scroll-right-button '(("") ""))
(customize-set-variable 'tabbar-scroll-left-button '(("") ""))
(customize-set-variable 'tabbar-buffer-home-button '(("") ""))

;; Change padding of the tabs
;; we also need to set separator to avoid overlapping tabs by highlighted tabs
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (dashboard spacemacs-theme idea-darkula-theme cmake-ide atom-one-dark-theme function-args flycheck google-c-style flycheck-clang-tidy zeal-at-point emamux gitignore-mode travis company-irony company-irony-c-headers irony doom-modeline docker ivy zeno-theme flycheck-cython flycheck-mypy smartparens rtags monokai-theme cmake-project cpputils-cmake flymake-cppcheck cmake-mode make-it-so sublime-themes sublimity flycheck-pyflakes kaolin-themes cython-mode git-gutter helm projectile auto-compile evil airline-themes powerline go-mode tabbar makefile-executor farmhouse-theme dracula-theme markdown-mode regex-tool salt-mode json-mode restclient nlinum toml-mode drag-stuff find-file-in-project hungry-delete focus multiple-cursors docker-compose-mode dockerfile-mode rust-mode vala-mode auto-complete dumb-jump magit fill-column-indicator expand-region neotree)))
 '(tabbar-separator (quote (0.5))))
;; adding spaces
(defun tabbar-buffer-tab-label (tab)
  "Return a label for TAB.
That is, a string used to represent it on the tab bar."
  (let ((label  (if tabbar--buffer-show-groups
                    (format "[%s]  " (tabbar-tab-tabset tab))
                  (format "%s  " (tabbar-tab-value tab)))))
    ;; Unless the tab bar auto scrolls to keep the selected tab
    ;; visible, shorten the tab label to keep as many tabs as possible
    ;; in the visible area of the tab bar.
    (if tabbar-auto-scroll-flag
        label
      (tabbar-shorten
       label (max 1 (/ (window-width)
                       (length (tabbar-view
                                (tabbar-current-tabset)))))))))


;; projectile
(projectile-mode +1)
(setq projectile-project-search-path '("~/Workspace/plotwise/" "~/Workspace/oss/"))
(global-set-key (kbd "M-p") 'projectile-switch-project)
(global-set-key (kbd "M-l") 'projectile-switch-open-project)

;; poweline
;;(require 'powerline)
;;(powerline-center-theme)
;;(require 'doom-modeline)
;;(doom-modeline-mode 1)

;; file manager
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
(setq neo-hidden-regexp-list '("venv" "\\.pyc$" "~$" "\\.cmake" "CMakeCache.txt" "\\.git" "\\.github" "CMakeFiles" "Testing" "__pycache__" "build"))
(setq neo-window-position (quote left))
(setq neo-window-fixed-size nil)

;; line settings
(global-display-line-numbers-mode 1)
;;(set-face-attribute 'line-number nil :background "#262626")
(set-face-attribute 'hl-line nil :background "#262626")
(set-face-foreground 'highlight nil)
;;(column-number-mode t)
;;(require 'fill-column-indicator)
;;(add-hook 'after-change-major-mode-hook 'fci-mode)
;;(setq fci-rule-column 120)
;;(setq-default
;; whitespace-line-column 120
;; whitespace-style '(face lines-tail))
;;(add-hook 'prog-mode-hook #'whitespace-mode)
(toggle-truncate-lines -1)
(add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode -1)))

;; tags settings
;; create tags
(defun create-tags (dir-name)
  "Create tags file."
  (interactive "DDirectory: ")
  (eshell-command
   (format "find . -type f -iname \"*.py\" -not -path \"*/venv/*\" | etags -" dir-name)))
;; refresh tags
(defun er-refresh-etags (&optional extension)
  "Run etags on all peer files in current dir and reload them silently."
  (interactive)
  (shell-command (format "find . -type f -iname \"*.py\" -not -path \"*/venv/*\" | etags -" '.))
  (let ((tags-revert-without-query t))  ; don't query, revert silently
    (visit-tags-table default-directory nil)))

;; buffer settings
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq-default truncate-lines 1)

;; default buffers
(setq inhibit-startup-screen t)
(setq-default message-log-max nil)
(kill-buffer "*Messages*")
(setq initial-scratch-message "")
(kill-buffer "*scratch*")
(add-hook 'minibuffer-exit-hook
	  '(lambda ()
	     (let ((buffer "*Completions*"))
	       (and (get-buffer buffer)
		    (kill-buffer buffer)))))

;; shortcut keys
;; create window
(global-set-key (kbd "M-<up>") 'windmove-up)
(global-set-key (kbd "M-<down>") 'windmove-down)
(global-set-key (kbd "M-<left>") 'windmove-left)
(global-set-key (kbd "M-<right>") 'windmove-right)
;; window size
(global-set-key (kbd "S-C-<up>") 'shrink-window)
(global-set-key (kbd "S-C-<down>") 'enlarge-window)
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)

(defun toggle-maximize-window ()
  (interactive)
  (if(get 'buffer-maximum-window-mode 'state)
      (progn
	(minimize-window)
	(put 'buffer-maximum-window-mode 'state nil))
    (progn
      (maximize-window)
      (put 'buffer-maximum-window-mode 'state t))))
(global-set-key (kbd "M-z") 'toggle-maximize-window)
;; (global-set-key (kbd "M-z") 'maximize-window)
;; (global-set-key (kbd "M-m") 'minimize-window)

;; select text
(global-set-key (kbd "C-o") 'er/expand-region)
;; goto
(global-set-key (kbd "M-d") 'dumb-jump-go)
(global-set-key (kbd "M-f") 'dumb-jump-back)
(global-set-key (kbd "M-q") 'dumb-jump-quick-look)
;; find
(global-set-key (kbd "C-p") 'find-grep)
;; auto indent (mark-whole-buffer -> c-x h, indent-region -> c-m-\)
;; git settings
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x v") 'magit-diff-unstaged)
(global-set-key (kbd "C-d") 'delete-indentation)
;; compile
;;(global-set-key (kbd "C-c r") 'compile)

;; fold
;;(load-library "hideshow")
;;(global-set-key (kbd "M-f") 'hs-toggle-hiding)
;;(add-hook 'python-mode-hook 'hs-minor-mode)

;; fuunction args
;;(fa-config-default)
''(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
''(semantic-add-system-include "/usr/include/" 'c++-mode)
''(global-set-key (kbd "M-q") 'fa-show)

;; compile
(global-set-key (kbd "C-c s") 'eshell)
					;(setq compile-command "cd build;cmake ..;make clean; make")
(global-set-key
 (kbd "C-c r") (lambda ()
		 (interactive)
		 (emamux:run-command "cd `git rev-parse --show-toplevel`/cmake-build-debug/ && cmake .. && make -j8")))
(global-set-key
 (kbd "C-c q") (lambda ()
		 (interactive)
		 (emamux:close-panes)))
(global-set-key (kbd "M-b") 'gdb-toggle-breakpoint)
(global-set-key (kbd "M-n") 'gdb-next-breakpoint)
(global-set-key (kbd "M-t") 'gdb)
(setq gud-gdb-command-name (concat "gdb -i=mi " (concat (shell-command-to-string "echo -n `git rev-parse --show-toplevel`") "/cmake-build-debug")))

;; cpp linter
;;(eval-after-load 'flycheck
;;  '(add-hook 'flycheck-mode-hook #'flycheck-clang-tidy-setup))
;;(setq flycheck-clang-tidy-build-path (concat (shell-command-to-string "echo -n `git rev-parse --show-toplevel`") "/cmake-build-debug"))

;; trim spaces
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)
(require 'smartparens-config)

;; paren
(show-paren-mode 1)

;; git
(global-set-key (kbd "C-x g") 'magit-status)
(global-git-gutter-mode +1)
(global-set-key (kbd "C-c d") 'git-gutter:popup-diff)

;; misc
(global-set-key (kbd "C-c g") 'rgrep)
;; help: https://stackoverflow.com/questions/6467002/how-to-kill-buffer-in-emacs-without-answering-confirmation
(global-set-key (kbd "C-x k") 'kill-current-buffer)

;; handle copy/paste
(defun copy-to-clipboard ()
  (interactive)
  (if (region-active-p)
      (progn
	(shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
	(message "Yanked region to clipboard!")
	(deactivate-mark))
    (message "No region active; can't yank to clipboard!"))
  )
(defun cut-to-clipboard ()
  (interactive)
  (if (region-active-p)
      (progn
	(shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
	(call-interactively 'clipboard-kill-region)
	(message "Cut region to clipboard!")
	(deactivate-mark))
    (message "No region active; can't yank to clipboard!"))
  )
(defun paste-from-clipboard ()
  (interactive)
  (insert (shell-command-to-string "xsel -o -b"))
  )
(global-set-key (kbd "M-w") 'copy-to-clipboard)
(global-set-key (kbd "C-w") 'cut-to-clipboard)
(global-set-key (kbd "C-y") 'paste-from-clipboard)
(global-set-key (kbd "C-q") 'paste-from-clipboard)

;; find & replace
;;(global-set-key (kbd "C-h") 'zeal-at-point)

;; hungry delete
;;(require 'hungry-delete)
;;(add-hook 'python-mode-hook #'(lambda () (hungry-keyboard python-mode-map)))
;;(global-set-key (kbd "C-h") 'hungry-delete-backward)
;;(global-set-key (kbd "C-<delete>") 'hungry-delete-forward)

;; find file in project
(global-set-key (kbd "C-f") 'find-file-in-project)
(global-set-key (kbd "C-d") 'find-file-with-similar-name)
(global-set-key (kbd "C-l") 'find-file-in-current-directory)
(global-set-key (kbd "C-v") 'ffip-split-window-vertically)
;;(global-set-key (kbd "C-h") 'ffip-split-window-horizontally)

;; drag lines (move up/down)
(require 'drag-stuff)
(drag-stuff-global-mode 1)
(global-set-key (kbd "M-S-<up>") 'drag-stuff-up)
(global-set-key (kbd "M-S-<down>") 'drag-stuff-down)

;; tabbar config
(global-set-key (kbd "S-<left>") 'tabbar-backward-tab)
(global-set-key (kbd "S-<right>") 'tabbar-forward-tab)

;; rest client mode
(global-set-key (kbd "M-r") 'restclient-mode)

;; help config
;;(require 'helm)
;;(helm-mode 1)
;;(setq helm-input-idle-delay 0.2)
;;(global-set-key (kbd "M-x") 'helm-M-x)
;;(global-set-key (kbd "M-c") 'helm-find)
;;(global-set-key (kbd "C-f") 'helm-find-files)
;;(global-set-key (kbd "C-s") 'helm-occur)
;;(global-set-key (kbd "M-v") 'helm-grep-do-git-grep)

;; flycheck
;;(add-hook 'after-init-hook #'global-flycheck-mode)

;; https://stackoverflow.com/a/14511461/2338672
(setq skippable-buffers '("*Messages*" "*scratch*" "*Help*", "*Flycheck error messages*", "*helm occur*"))
(defun my-next-buffer ()
  "next-buffer that skips certain buffers"
  (interactive)
  (next-buffer)
  (while (member (buffer-name) skippable-buffers)
    (next-buffer)))
(defun my-previous-buffer ()
  "previous-buffer that skips certain buffers"
  (interactive)
  (previous-buffer)
  (while (member (buffer-name) skippable-buffers)
    (previous-buffer)))
(global-set-key [remap next-buffer] 'my-next-buffer)
(global-set-key [remap previous-buffer] 'my-previous-buffer)

;; irony
;;(add-hook 'c++-mode-hook 'irony-mode)
;;(add-hook 'c-mode-hook 'irony-mode)
;;(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
;;(add-hook 'after-init-hook 'global-company-mode)
;;(eval-after-load 'company
;;  '(add-to-list 'company-backends 'company-irony))
;;(global-set-key (kbd "M-z") 'company-complete)
;;(add-to-list 'company-backends 'company-c-headers)


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil)))))


;; https://emacs.stackexchange.com/a/30475/19615
(defun ask-before-closing ()
  "Close only if y was pressed."
  (interactive)
  (if (y-or-n-p (format "Are you sure you want to close this frame? "))
      (save-buffers-kill-emacs)
    (message "Canceled frame close")))

(when (daemonp)
  (global-set-key (kbd "C-x C-c") 'ask-before-closing))
